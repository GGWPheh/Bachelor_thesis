data = {
  const imports = await d3.json("https://run.mocky.io/v3/09f46a8e-aad9-4e68-8851-28e7bd324f04");
  //const imports = await FileAttachment("chorddata@3.json").json();

  const indexByName = new Map;
  const nameByIndex = new Map;
  const matrix = [];
  
  const scores = new Map;
  const freqs = new Map;
  const ndnodes = new Map;
  
  const min_score = 40000;
  const min_freq = 500;
  const min_node = 200;
  const max_size = 150;
  let n = 0;

  // Returns the Flare package name for the given class name.
  function name(name) {
    return name;//.substring(0, name.lastIndexOf(".")).substring(6);
  }

  // Compute a unique index for each package name.
  imports.forEach(d => {
    scores.set(d.name,d.score);
    freqs.set(d.name,d.freq);
    ndnodes.set(d.name,d.nbnode);
    if (!indexByName.has(d = name(d.name))) {
      nameByIndex.set(n, d);
      indexByName.set(d, n++);  
    }
  });

  // Construct a square matrix counting package imports.
  imports.forEach(d => {
    const source = indexByName.get(name(d.name));
    let row = matrix[source];
    if (!row) row = matrix[source] = Array.from({length: n}).fill(0);
    d.imports.forEach(d => row[indexByName.get(name(d))]++);
  });
  
  const size = new Map([...scores].filter(([index,value]) => value > min_score)).size;
  const sliced_matrix = matrix.slice(0,size);
  
  return {
    scores,
    freqs,
    ndnodes,
    sliced_matrix,
    indexByName,
    nameByIndex,
    size
  };
}
chart = {
  const svg = d3.create("svg")
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("font-size", data.size*0.3)
      .attr("font-family", "sans-serif")
      .style("width", "100%")
      .style("height", "auto");

  const chords = chord(data.sliced_matrix);

  const group = svg.append("g")
    .selectAll("g")
    .data(chords.groups)
    .join("g");
  
  function onMouseOver(selected) {
    group      
      .filter( d => d.index !== selected.index)
      .style("opacity", 0.3);
    
    svg.selectAll(".chord")
      .filter( d => d.source.index !== selected.index)
      .style("opacity", 0.3);
  }
  
  function onMouseOut() {
    group.style("opacity", 1);
    svg.selectAll(".chord")
      .style("opacity", 1);
  }

  group.append("path")
      .attr("fill", d => color(d.index))
      .attr("stroke", d => color(d.index))
      .attr("d", arc)
      .on("mouseover", onMouseOver)
      .on("mouseout", onMouseOut);

  group.append("text")
      .each(d => { d.angle = (d.startAngle + d.endAngle) / 2; })
      .attr("dy", ".35em")
      .attr("transform", d => `
        rotate(${(d.angle * 180 / Math.PI - 90)})
        translate(${innerRadius + 26})
        ${d.angle > Math.PI ? "rotate(180)" : ""}
      `)
      .attr("text-anchor", d => d.angle > Math.PI ? "end" : null)
      .text(d => data.nameByIndex.get(d.index));

  svg.append("g")
      .attr("fill-opacity", 0.67)
    .selectAll("path")
    .data(chords)
    .join("path")
      .attr("class", "chord")
      .attr("stroke", d => d3.rgb(color(d.source.index)).darker())
      .attr("fill", d => color(d.source.index))
      .attr("d", ribbon)
      .on("mouseover", d => onMouseOver(d.source))
      .on("mouseout", d => onMouseOut(d.source));
  
  

  return svg.node();
}
